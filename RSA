import java.io.DataInputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.util.Random;


public class RSA implements RSAADT
{

	private BigInteger p;
	private BigInteger q;
	private BigInteger N;
	private BigInteger phi;
	private BigInteger e;
	private BigInteger d;
	private int        bitlength = 8;
	private Random     r;

	public RSA()
	{
		r = new Random();
		p = BigInteger.probablePrime(bitlength, r);
		q = BigInteger.probablePrime(bitlength, r);
		N = p.multiply(q);
		phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

		e = BigInteger.probablePrime(bitlength / 2, r);
		while (phi.gcd(e).compareTo(BigInteger.ONE) > 0 && e.compareTo(phi) < 0)
		{
			e.add(BigInteger.ONE);
		}
		d = e.modInverse(phi);
	}

	public RSA(BigInteger e, BigInteger d, BigInteger N)
	{
		this.e = e;
		this.d = d;
		this.N = N;
	}

	public static String bytesToString(byte[] encrypted)
	{
		String test = "";
		for (byte b : encrypted)
		{
			test += Byte.toString(b);
		}
		return test;
	}

	public BigInteger getP()
	{
		return p;
	}

	public BigInteger getQ()
	{
		return q;
	}

	public BigInteger getD()
	{
		return d;
	}

	public BigInteger getN()
	{
		return N;
	}
	
	public BigInteger getE()
	{
		return e;
	}
	
	

	//This is for returning a private and public key. This method would normally NEVER be available to the public, but for this project, it is there
	//for checking for clarity
	public void getPublicKey()
	{
		System.out.println("The public key is: " + N + "," + e);
	}

	public void getPrivateKey()
	{
		System.out.println("The private key is: " + N + "," + d);
	}

	// Encrypt message
	public byte[] encrypt(byte[] message)
	{
		return (new BigInteger(message)).modPow(e, N).toByteArray();
	}

	// Decrypt message
	public byte[] decrypt(byte[] message)
	{
		return (new BigInteger(message)).modPow(d, N).toByteArray();
	}
}
